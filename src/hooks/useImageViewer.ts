import { useState, useCallback } from 'react';\nimport { UnsplashImage, ViewerState } from '@/types';\n\ninterface UseImageViewerReturn {\n  viewerState: ViewerState;\n  isOpen: boolean;\n  currentImage: UnsplashImage | null;\n  openViewer: (image: UnsplashImage, images: UnsplashImage[], index: number) => void;\n  closeViewer: () => void;\n  navigateImage: (direction: 'prev' | 'next') => void;\n  setCurrentStyle: (style: any) => void;\n  updateTabState: (tabState: any) => void;\n}\n\nexport function useImageViewer(): UseImageViewerReturn {\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentImage, setCurrentImage] = useState<UnsplashImage | null>(null);\n  const [images, setImages] = useState<UnsplashImage[]>([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [viewerState, setViewerState] = useState<ViewerState>({\n    currentImageIndex: 0,\n    showDescription: true,\n    currentStyle: 'detailed',\n    tabState: {\n      activeTab: 'english',\n      showEnglish: true,\n      showSpanish: true\n    }\n  });\n\n  const openViewer = useCallback((image: UnsplashImage, imageList: UnsplashImage[], index: number) => {\n    setCurrentImage(image);\n    setImages(imageList);\n    setCurrentIndex(index);\n    setViewerState(prev => ({\n      ...prev,\n      currentImageIndex: index\n    }));\n    setIsOpen(true);\n  }, []);\n\n  const closeViewer = useCallback(() => {\n    setIsOpen(false);\n    // Don't reset state immediately to allow for smooth closing animation\n    setTimeout(() => {\n      setCurrentImage(null);\n      setImages([]);\n      setCurrentIndex(0);\n    }, 200);\n  }, []);\n\n  const navigateImage = useCallback((direction: 'prev' | 'next') => {\n    const newIndex = direction === 'next' \n      ? Math.min(currentIndex + 1, images.length - 1)\n      : Math.max(currentIndex - 1, 0);\n    \n    if (newIndex !== currentIndex) {\n      setCurrentIndex(newIndex);\n      setCurrentImage(images[newIndex]);\n      setViewerState(prev => ({\n        ...prev,\n        currentImageIndex: newIndex\n      }));\n    }\n  }, [currentIndex, images]);\n\n  const setCurrentStyle = useCallback((style: any) => {\n    setViewerState(prev => ({\n      ...prev,\n      currentStyle: style\n    }));\n  }, []);\n\n  const updateTabState = useCallback((tabState: any) => {\n    setViewerState(prev => ({\n      ...prev,\n      tabState\n    }));\n  }, []);\n\n  return {\n    viewerState,\n    isOpen,\n    currentImage,\n    openViewer,\n    closeViewer,\n    navigateImage,\n    setCurrentStyle,\n    updateTabState\n  };\n}"