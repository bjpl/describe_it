import { useState, useEffect, useCallback } from 'react';\n\n/**\n * Custom hook for managing localStorage with React state synchronization\n * @param key The localStorage key\n * @param initialValue The initial value if no stored value exists\n * @returns [value, setValue, removeValue]\n */\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (value: T | ((prev: T) => T)) => void, () => void] {\n  // Get value from localStorage or use initial value\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      if (typeof window === 'undefined') {\n        return initialValue;\n      }\n      \n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Update localStorage when state changes\n  const setValue = useCallback(\n    (value: T | ((prev: T) => T)) => {\n      try {\n        // Allow value to be a function for functional updates\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        \n        setStoredValue(valueToStore);\n        \n        if (typeof window !== 'undefined') {\n          window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        }\n      } catch (error) {\n        console.error(`Error setting localStorage key \"${key}\":`, error);\n      }\n    },\n    [key, storedValue]\n  );\n\n  // Remove value from localStorage\n  const removeValue = useCallback(() => {\n    try {\n      setStoredValue(initialValue);\n      \n      if (typeof window !== 'undefined') {\n        window.localStorage.removeItem(key);\n      }\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key, initialValue]);\n\n  // Listen for changes in other tabs\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.error(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('storage', handleStorageChange);\n      return () => window.removeEventListener('storage', handleStorageChange);\n    }\n  }, [key]);\n\n  return [storedValue, setValue, removeValue];\n}"