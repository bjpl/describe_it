import { useState, useMemo } from 'react';\nimport { PaginationInfo } from '@/types';\n\ninterface UsePaginationProps {\n  totalItems: number;\n  itemsPerPage: number;\n  initialPage?: number;\n}\n\ninterface UsePaginationReturn {\n  currentPage: number;\n  totalPages: number;\n  paginationInfo: PaginationInfo;\n  goToPage: (page: number) => void;\n  nextPage: () => void;\n  prevPage: () => void;\n  goToFirstPage: () => void;\n  goToLastPage: () => void;\n  getPageItems: <T>(items: T[]) => T[];\n}\n\nexport function usePagination({\n  totalItems,\n  itemsPerPage,\n  initialPage = 1\n}: UsePaginationProps): UsePaginationReturn {\n  const [currentPage, setCurrentPage] = useState(initialPage);\n\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n\n  const paginationInfo: PaginationInfo = useMemo(() => ({\n    currentPage,\n    totalPages,\n    totalItems,\n    hasNextPage: currentPage < totalPages,\n    hasPrevPage: currentPage > 1\n  }), [currentPage, totalPages, totalItems]);\n\n  const goToPage = (page: number) => {\n    const validPage = Math.max(1, Math.min(page, totalPages));\n    setCurrentPage(validPage);\n  };\n\n  const nextPage = () => {\n    if (paginationInfo.hasNextPage) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const prevPage = () => {\n    if (paginationInfo.hasPrevPage) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  const goToFirstPage = () => setCurrentPage(1);\n  const goToLastPage = () => setCurrentPage(totalPages);\n\n  const getPageItems = <T>(items: T[]): T[] => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return items.slice(startIndex, endIndex);\n  };\n\n  return {\n    currentPage,\n    totalPages,\n    paginationInfo,\n    goToPage,\n    nextPage,\n    prevPage,\n    goToFirstPage,\n    goToLastPage,\n    getPageItems\n  };\n}"