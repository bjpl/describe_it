import { useState, useCallback, useEffect } from 'react';\nimport { ExtractedPhrase, PhraseBankEntry } from '@/types';\nimport { useLocalStorage } from './useLocalStorage';\n\ninterface UsePhraBankReturn {\n  phrases: PhraseBankEntry[];\n  addPhrase: (phrase: ExtractedPhrase, imageId: string) => void;\n  removePhrase: (phraseId: string) => void;\n  markAsPracticed: (phraseId: string) => void;\n  updateMastery: (phraseId: string, mastery: number) => void;\n  getPhrasesByImage: (imageId: string) => PhraseBankEntry[];\n  getPhrasesByCategory: (category: string) => PhraseBankEntry[];\n  getTotalPhrases: () => number;\n  getPracticeStats: () => { total: number; practiced: number; mastered: number };\n  clearAllPhrases: () => void;\n  exportPhrases: () => string;\n  importPhrases: (data: string) => boolean;\n}\n\nexport function usePhraseBank(): UsePhraBankReturn {\n  const [phrases, setPhrases] = useLocalStorage<PhraseBankEntry[]>('phrase-bank', []);\n\n  const addPhrase = useCallback((phrase: ExtractedPhrase, imageId: string) => {\n    // Check if phrase already exists\n    const existingPhrase = phrases.find(entry => entry.phrase.id === phrase.id);\n    if (existingPhrase) {\n      return;\n    }\n\n    const newEntry: PhraseBankEntry = {\n      id: `entry-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      phrase,\n      imageId,\n      addedAt: new Date().toISOString(),\n      practiced: false,\n      mastery: 0\n    };\n\n    setPhrases(prev => [...prev, newEntry]);\n  }, [phrases, setPhrases]);\n\n  const removePhrase = useCallback((phraseId: string) => {\n    setPhrases(prev => prev.filter(entry => entry.phrase.id !== phraseId));\n  }, [setPhrases]);\n\n  const markAsPracticed = useCallback((phraseId: string) => {\n    setPhrases(prev => prev.map(entry => \n      entry.phrase.id === phraseId \n        ? { ...entry, practiced: true }\n        : entry\n    ));\n  }, [setPhrases]);\n\n  const updateMastery = useCallback((phraseId: string, mastery: number) => {\n    const clampedMastery = Math.max(0, Math.min(100, mastery));\n    \n    setPhrases(prev => prev.map(entry => \n      entry.phrase.id === phraseId \n        ? { \n            ...entry, \n            mastery: clampedMastery,\n            practiced: clampedMastery > 0\n          }\n        : entry\n    ));\n  }, [setPhrases]);\n\n  const getPhrasesByImage = useCallback((imageId: string) => {\n    return phrases.filter(entry => entry.imageId === imageId);\n  }, [phrases]);\n\n  const getPhrasesByCategory = useCallback((category: string) => {\n    return phrases.filter(entry => entry.phrase.category === category);\n  }, [phrases]);\n\n  const getTotalPhrases = useCallback(() => {\n    return phrases.length;\n  }, [phrases]);\n\n  const getPracticeStats = useCallback(() => {\n    const total = phrases.length;\n    const practiced = phrases.filter(entry => entry.practiced).length;\n    const mastered = phrases.filter(entry => entry.mastery >= 80).length;\n    \n    return { total, practiced, mastered };\n  }, [phrases]);\n\n  const clearAllPhrases = useCallback(() => {\n    setPhrases([]);\n  }, [setPhrases]);\n\n  const exportPhrases = useCallback(() => {\n    const exportData = {\n      version: '1.0',\n      exportDate: new Date().toISOString(),\n      phrases\n    };\n    \n    return JSON.stringify(exportData, null, 2);\n  }, [phrases]);\n\n  const importPhrases = useCallback((data: string): boolean => {\n    try {\n      const importData = JSON.parse(data);\n      \n      if (!importData.phrases || !Array.isArray(importData.phrases)) {\n        throw new Error('Invalid import data format');\n      }\n      \n      // Validate each phrase entry\n      const validPhrases = importData.phrases.filter((entry: any) => {\n        return entry.id && entry.phrase && entry.imageId && entry.addedAt;\n      });\n      \n      if (validPhrases.length === 0) {\n        throw new Error('No valid phrases found in import data');\n      }\n      \n      // Merge with existing phrases (avoid duplicates)\n      setPhrases(prev => {\n        const existingIds = new Set(prev.map(entry => entry.id));\n        const newPhrases = validPhrases.filter((entry: PhraseBankEntry) => \n          !existingIds.has(entry.id)\n        );\n        \n        return [...prev, ...newPhrases];\n      });\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to import phrases:', error);\n      return false;\n    }\n  }, [setPhrases]);\n\n  return {\n    phrases,\n    addPhrase,\n    removePhrase,\n    markAsPracticed,\n    updateMastery,\n    getPhrasesByImage,\n    getPhrasesByCategory,\n    getTotalPhrases,\n    getPracticeStats,\n    clearAllPhrases,\n    exportPhrases,\n    importPhrases\n  };\n}"