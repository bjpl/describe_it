import React, { memo, useMemo, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FixedSizeGrid as Grid } from 'react-window';
import { Heart, Download, User, Calendar, Loader2 } from 'lucide-react';
import { UnsplashImage } from '@/types';
import { OptimizedImage } from './OptimizedImage';
import { ImageCardSkeleton } from '@/components/Loading/SkeletonScreens';
import { useIntersectionObserver, useVirtualScroll } from '@/hooks/usePerformanceOptimizations';

interface OptimizedImageGridProps {
  images: UnsplashImage[];
  onImageClick: (image: UnsplashImage) => void;
  loading?: boolean;
  columns?: number;
  itemHeight?: number;
  containerHeight?: number;
  virtualized?: boolean;
  showUserInfo?: boolean;
  showStats?: boolean;
  priority?: number; // Number of images to prioritize loading
}

// Memoized image card component
const ImageCard = memo<{
  image: UnsplashImage;
  onClick: (image: UnsplashImage) => void;
  showUserInfo?: boolean;
  showStats?: boolean;
  priority?: boolean;
  style?: React.CSSProperties;
}>(({ image, onClick, showUserInfo = true, showStats = true, priority = false, style }) => {
  const handleClick = useCallback(() => {
    onClick(image);
  }, [image, onClick]);

  const handleDownload = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    const link = document.createElement('a');
    link.href = image.urls.regular;
    link.download = `unsplash-${image.id}.jpg`;
    link.click();
  }, [image.urls.regular, image.id]);

  return (
    <motion.div
      style={style}
      className=\"group relative overflow-hidden rounded-xl cursor-pointer bg-gray-100 dark:bg-gray-800 shadow-sm hover:shadow-md transition-shadow\"\n      whileHover={{ \n        scale: 1.02,\n        transition: { duration: 0.2 }\n      }}\n      whileTap={{ scale: 0.98 }}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={`View image: ${image.alt_description || image.description || 'Unsplash image'}`}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          handleClick();\n        }\n      }}\n    >\n      <div className=\"aspect-square\">\n        <OptimizedImage\n          src={image.urls.small}\n          alt={image.alt_description || image.description || 'Unsplash image'}\n          fill\n          sizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw\"\n          className=\"object-cover transition-transform duration-300 group-hover:scale-110\"\n          priority={priority}\n          quality={80}\n        />\n      </div>\n      \n      {/* Overlay */}\n      <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300\" />\n      \n      {/* Hover Content */}\n      <AnimatePresence>\n        <motion.div \n          className=\"absolute inset-0 p-3 flex flex-col justify-between opacity-0 group-hover:opacity-100 group-focus:opacity-100 transition-all duration-300\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 0 }}\n          whileHover={{ opacity: 1 }}\n        >\n          {/* Top Section - Image Info */}\n          {showStats && (\n            <div className=\"flex items-start justify-between\">\n              <div \n                className=\"flex items-center gap-1 bg-black bg-opacity-50 rounded-full px-2 py-1 text-white text-xs\"\n                role=\"img\"\n                aria-label={`${image.likes} likes`}\n              >\n                <Heart className=\"h-3 w-3\" aria-hidden=\"true\" />\n                <span>{image.likes}</span>\n              </div>\n              \n              <button\n                onClick={handleDownload}\n                className=\"bg-black bg-opacity-50 rounded-full p-1 text-white hover:text-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black\"\n                aria-label=\"Download image\"\n                title=\"Download image\"\n              >\n                <Download className=\"h-3 w-3\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          )}\n          \n          {/* Bottom Section - User Info */}\n          {showUserInfo && (\n            <div className=\"space-y-2\">\n              {/* Description */}\n              {(image.description || image.alt_description) && (\n                <p \n                  className=\"text-white text-xs bg-black bg-opacity-50 rounded-lg px-2 py-1 line-clamp-2\"\n                  title={image.description || image.alt_description}\n                >\n                  {image.description || image.alt_description}\n                </p>\n              )}\n              \n              {/* User Info */}\n              <div className=\"flex items-center gap-2 bg-black bg-opacity-50 rounded-lg px-2 py-1\">\n                <User className=\"h-3 w-3 text-white\" aria-hidden=\"true\" />\n                <span \n                  className=\"text-white text-xs font-medium truncate\"\n                  title={`Photo by ${image.user.name}`}\n                >\n                  {image.user.name}\n                </span>\n              </div>\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n      \n      {/* Quick Preview Button */}\n      <div className=\"absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 group-focus:opacity-100 transition-all duration-300\">\n        <motion.button\n          onClick={(e) => {\n            e.stopPropagation();\n            handleClick();\n          }}\n          className=\"bg-white bg-opacity-90 hover:bg-opacity-100 text-gray-800 px-4 py-2 rounded-full font-medium transition-all duration-200 shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          aria-label=\"View full image\"\n        >\n          View Image\n        </motion.button>\n      </div>\n      \n      {/* Image Dimensions Indicator */}\n      <div \n        className=\"absolute top-3 left-3 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300\"\n        role=\"img\"\n        aria-label={`Image dimensions: ${image.width} by ${image.height} pixels`}\n      >\n        {image.width} √ó {image.height}\n      </div>\n      \n      {/* Creation Date */}\n      <div className=\"absolute bottom-3 right-3 flex items-center gap-1 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300\">\n        <Calendar className=\"h-3 w-3\" aria-hidden=\"true\" />\n        <time dateTime={image.created_at}>\n          {new Date(image.created_at).toLocaleDateString()}\n        </time>\n      </div>\n    </motion.div>\n  );\n});\n\nImageCard.displayName = 'ImageCard';\n\n// Virtualized grid item renderer\nconst VirtualizedItem = memo<{\n  columnIndex: number;\n  rowIndex: number;\n  style: React.CSSProperties;\n  data: {\n    images: UnsplashImage[];\n    columns: number;\n    onImageClick: (image: UnsplashImage) => void;\n    showUserInfo: boolean;\n    showStats: boolean;\n    priority: number;\n  };\n}>(({ columnIndex, rowIndex, style, data }) => {\n  const { images, columns, onImageClick, showUserInfo, showStats, priority } = data;\n  const index = rowIndex * columns + columnIndex;\n  const image = images[index];\n\n  if (!image) {\n    return <div style={style} />;\n  }\n\n  return (\n    <div style={{ ...style, padding: '8px' }}>\n      <ImageCard\n        image={image}\n        onClick={onImageClick}\n        showUserInfo={showUserInfo}\n        showStats={showStats}\n        priority={index < priority}\n      />\n    </div>\n  );\n});\n\nVirtualizedItem.displayName = 'VirtualizedItem';\n\nexport const OptimizedImageGrid = memo<OptimizedImageGridProps>(({ \n  images, \n  onImageClick, \n  loading = false,\n  columns = 4,\n  itemHeight = 300,\n  containerHeight = 600,\n  virtualized = false,\n  showUserInfo = true,\n  showStats = true,\n  priority = 4\n}) => {\n  const { entries, observe, unobserve } = useIntersectionObserver({\n    threshold: 0.1,\n    rootMargin: '100px'\n  });\n\n  const gridClasses = useMemo(() => {\n    return `\n      grid gap-4 w-full\n      ${columns === 1 ? 'grid-cols-1' : ''}\n      ${columns === 2 ? 'grid-cols-1 sm:grid-cols-2' : ''}\n      ${columns === 3 ? 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3' : ''}\n      ${columns === 4 ? 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4' : ''}\n    `.trim();\n  }, [columns]);\n\n  const containerVariants = useMemo(() => ({\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2\n      }\n    }\n  }), []);\n\n  const itemVariants = useMemo(() => ({\n    hidden: { \n      opacity: 0, \n      scale: 0.8,\n      y: 20\n    },\n    visible: { \n      opacity: 1, \n      scale: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        ease: \"easeOut\"\n      }\n    }\n  }), []);\n\n  // Loading state\n  if (loading) {\n    return (\n      <div className={gridClasses}>\n        {Array.from({ length: columns * 2 }).map((_, index) => (\n          <ImageCardSkeleton key={index} showUser={showUserInfo} showStats={showStats} />\n        ))}\n      </div>\n    );\n  }\n\n  // Empty state\n  if (images.length === 0) {\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center py-12 space-y-4\"\n      >\n        <div className=\"text-6xl mb-4\" role=\"img\" aria-label=\"No results\">\n          üîç\n        </div>\n        <h3 className=\"text-xl font-medium text-gray-700 dark:text-gray-300\">\n          No images found\n        </h3>\n        <p className=\"text-gray-500 dark:text-gray-400 max-w-md mx-auto\">\n          Try different keywords or check your spelling. Popular searches include nature, people, technology, and architecture.\n        </p>\n      </motion.div>\n    );\n  }\n\n  // Virtualized grid for large datasets\n  if (virtualized && images.length > 100) {\n    const rowCount = Math.ceil(images.length / columns);\n    const columnWidth = containerHeight / columns;\n\n    return (\n      <div \n        style={{ height: containerHeight, width: '100%' }}\n        role=\"grid\"\n        aria-label={`Image grid with ${images.length} images`}\n      >\n        <Grid\n          columnCount={columns}\n          columnWidth={columnWidth}\n          height={containerHeight}\n          rowCount={rowCount}\n          rowHeight={itemHeight}\n          width={\"100%\"}\n          itemData={{\n            images,\n            columns,\n            onImageClick,\n            showUserInfo,\n            showStats,\n            priority\n          }}\n        >\n          {VirtualizedItem}\n        </Grid>\n      </div>\n    );\n  }\n\n  // Standard grid\n  return (\n    <motion.div\n      className={gridClasses}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      role=\"grid\"\n      aria-label={`Image grid with ${images.length} images`}\n    >\n      {images.map((image, index) => (\n        <motion.div\n          key={image.id}\n          variants={itemVariants}\n          role=\"gridcell\"\n        >\n          <ImageCard\n            image={image}\n            onClick={onImageClick}\n            showUserInfo={showUserInfo}\n            showStats={showStats}\n            priority={index < priority}\n          />\n        </motion.div>\n      ))}\n    </motion.div>\n  );\n});\n\nOptimizedImageGrid.displayName = 'OptimizedImageGrid';