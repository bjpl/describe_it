import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Loader2 } from 'lucide-react';\n\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  message?: string;\n  color?: 'primary' | 'white' | 'gray';\n}\n\nconst sizeClasses = {\n  sm: 'h-4 w-4',\n  md: 'h-6 w-6',\n  lg: 'h-8 w-8',\n  xl: 'h-12 w-12'\n};\n\nconst colorClasses = {\n  primary: 'text-primary-600',\n  white: 'text-white',\n  gray: 'text-gray-600'\n};\n\nexport function LoadingSpinner({ \n  size = 'md', \n  className = '', \n  message, \n  color = 'primary' \n}: LoadingSpinnerProps) {\n  const spinVariants = {\n    animate: {\n      rotate: 360,\n      transition: {\n        duration: 1,\n        repeat: Infinity,\n        ease: \"linear\"\n      }\n    }\n  };\n\n  return (\n    <div className={`flex flex-col items-center justify-center space-y-2 ${className}`}>\n      <motion.div\n        variants={spinVariants}\n        animate=\"animate\"\n        className={`${sizeClasses[size]} ${colorClasses[color]}`}\n      >\n        <Loader2 className=\"w-full h-full\" />\n      </motion.div>\n      {message && (\n        <motion.p \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"text-sm text-gray-600 text-center\"\n        >\n          {message}\n        </motion.p>\n      )}\n    </div>\n  );\n}\n\n// Alternative animated spinner designs\nexport function DotsSpinner({ \n  size = 'md', \n  className = '', \n  color = 'primary' \n}: Omit<LoadingSpinnerProps, 'message'>) {\n  const dotSize = {\n    sm: 'w-1 h-1',\n    md: 'w-2 h-2', \n    lg: 'w-3 h-3',\n    xl: 'w-4 h-4'\n  };\n\n  const containerVariants = {\n    animate: {\n      transition: {\n        staggerChildren: 0.1,\n        repeat: Infinity,\n        repeatType: \"reverse\" as const\n      }\n    }\n  };\n\n  const dotVariants = {\n    animate: {\n      y: [0, -8, 0],\n      transition: {\n        duration: 0.6,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  return (\n    <motion.div \n      className={`flex space-x-1 ${className}`}\n      variants={containerVariants}\n      animate=\"animate\"\n    >\n      {[0, 1, 2].map((index) => (\n        <motion.div\n          key={index}\n          className={`${dotSize[size]} rounded-full ${\n            color === 'primary' ? 'bg-primary-600' :\n            color === 'white' ? 'bg-white' : 'bg-gray-600'\n          }`}\n          variants={dotVariants}\n        />\n      ))}\n    </motion.div>\n  );\n}\n\nexport function PulseSpinner({ \n  size = 'md', \n  className = '', \n  color = 'primary' \n}: Omit<LoadingSpinnerProps, 'message'>) {\n  const pulseVariants = {\n    animate: {\n      scale: [1, 1.2, 1],\n      opacity: [0.7, 1, 0.7],\n      transition: {\n        duration: 1.5,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  return (\n    <motion.div\n      className={`${sizeClasses[size]} rounded-full border-2 ${\n        color === 'primary' ? 'border-primary-600' :\n        color === 'white' ? 'border-white' : 'border-gray-600'\n      } ${className}`}\n      variants={pulseVariants}\n      animate=\"animate\"\n    />\n  );\n}\n\n// Skeleton loading components\nexport function TextSkeleton({ lines = 1, className = '' }: { lines?: number; className?: string }) {\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {Array.from({ length: lines }).map((_, index) => (\n        <div\n          key={index}\n          className=\"h-4 bg-gray-200 rounded animate-pulse\"\n          style={{ width: `${Math.random() * 40 + 60}%` }}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport function ImageSkeleton({ \n  aspectRatio = 'square',\n  className = '' \n}: { \n  aspectRatio?: 'square' | 'landscape' | 'portrait';\n  className?: string;\n}) {\n  const aspectClasses = {\n    square: 'aspect-square',\n    landscape: 'aspect-video',\n    portrait: 'aspect-[3/4]'\n  };\n\n  return (\n    <div \n      className={`${aspectClasses[aspectRatio]} bg-gray-200 rounded-lg animate-pulse ${className}`}\n    />\n  );\n}\n\nexport function CardSkeleton({ className = '' }: { className?: string }) {\n  return (\n    <div className={`border border-gray-200 rounded-lg p-4 space-y-4 ${className}`}>\n      <ImageSkeleton aspectRatio=\"landscape\" />\n      <div className=\"space-y-2\">\n        <TextSkeleton lines={1} />\n        <TextSkeleton lines={2} />\n      </div>\n      <div className=\"flex justify-between items-center\">\n        <div className=\"h-8 w-20 bg-gray-200 rounded animate-pulse\" />\n        <div className=\"h-8 w-16 bg-gray-200 rounded animate-pulse\" />\n      </div>\n    </div>\n  );\n}"}