import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport * as Tabs from '@radix-ui/react-tabs';\nimport * as RadioGroup from '@radix-ui/react-radio-group';\nimport * as Checkbox from '@radix-ui/react-checkbox';\nimport { Eye, EyeOff, Sparkles, BookOpen, Palette, Wrench, Scroll, CheckIcon, RefreshCw } from 'lucide-react';\nimport { DescriptionStyle, ImageDescription, TabState } from '@/types';\n\ninterface DescriptionTabsProps {\n  descriptions: ImageDescription[];\n  currentStyle: DescriptionStyle;\n  tabState: TabState;\n  onStyleChange: (style: DescriptionStyle) => void;\n  onTabStateChange: (tabState: TabState) => void;\n  onRegenerateDescription: (style: DescriptionStyle) => void;\n  loading: boolean;\n  className?: string;\n}\n\nconst styleConfigs = {\n  detailed: {\n    icon: BookOpen,\n    label: 'Detailed',\n    description: 'Comprehensive and thorough descriptions',\n    color: 'bg-blue-500',\n    bgColor: 'bg-blue-50',\n    borderColor: 'border-blue-200'\n  },\n  simple: {\n    icon: Eye,\n    label: 'Simple',\n    description: 'Clear and concise descriptions',\n    color: 'bg-green-500',\n    bgColor: 'bg-green-50',\n    borderColor: 'border-green-200'\n  },\n  poetic: {\n    icon: Palette,\n    label: 'Poetic',\n    description: 'Creative and artistic descriptions',\n    color: 'bg-purple-500',\n    bgColor: 'bg-purple-50',\n    borderColor: 'border-purple-200'\n  },\n  technical: {\n    icon: Wrench,\n    label: 'Technical',\n    description: 'Precise and analytical descriptions',\n    color: 'bg-gray-500',\n    bgColor: 'bg-gray-50',\n    borderColor: 'border-gray-200'\n  },\n  narrative: {\n    icon: Scroll,\n    label: 'Narrative',\n    description: 'Story-telling and contextual descriptions',\n    color: 'bg-orange-500',\n    bgColor: 'bg-orange-50',\n    borderColor: 'border-orange-200'\n  }\n};\n\nexport function DescriptionTabs({\n  descriptions,\n  currentStyle,\n  tabState,\n  onStyleChange,\n  onTabStateChange,\n  onRegenerateDescription,\n  loading,\n  className = ''\n}: DescriptionTabsProps) {\n  const [isRegenerating, setIsRegenerating] = useState(false);\n  \n  const currentDescription = descriptions.find(d => d.style === currentStyle);\n  const currentConfig = styleConfigs[currentStyle];\n  \n  const handleRegenerate = async () => {\n    setIsRegenerating(true);\n    await onRegenerateDescription(currentStyle);\n    setIsRegenerating(false);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 10 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  const textVariants = {\n    hidden: { opacity: 0, x: -20 },\n    visible: { \n      opacity: 1, \n      x: 0,\n      transition: { duration: 0.3 }\n    },\n    exit: { \n      opacity: 0, \n      x: 20,\n      transition: { duration: 0.2 }\n    }\n  };\n\n  return (\n    <motion.div\n      className={`w-full max-w-4xl mx-auto space-y-6 ${className}`}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      {/* Style Selection */}\n      <motion.div variants={itemVariants} className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">Description Style</h3>\n          \n          {/* Language Toggles */}\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox.Root\n                id=\"show-english\"\n                checked={tabState.showEnglish}\n                onCheckedChange={(checked) => \n                  onTabStateChange({ ...tabState, showEnglish: !!checked })\n                }\n                className=\"flex h-5 w-5 appearance-none items-center justify-center rounded border border-gray-300 bg-white data-[state=checked]:bg-primary-600 data-[state=checked]:border-primary-600\"\n              >\n                <Checkbox.Indicator className=\"text-white\">\n                  <CheckIcon className=\"h-3 w-3\" />\n                </Checkbox.Indicator>\n              </Checkbox.Root>\n              <label htmlFor=\"show-english\" className=\"text-sm font-medium text-gray-700 cursor-pointer\">\n                English\n              </label>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox.Root\n                id=\"show-spanish\"\n                checked={tabState.showSpanish}\n                onCheckedChange={(checked) => \n                  onTabStateChange({ ...tabState, showSpanish: !!checked })\n                }\n                className=\"flex h-5 w-5 appearance-none items-center justify-center rounded border border-gray-300 bg-white data-[state=checked]:bg-primary-600 data-[state=checked]:border-primary-600\"\n              >\n                <Checkbox.Indicator className=\"text-white\">\n                  <CheckIcon className=\"h-3 w-3\" />\n                </Checkbox.Indicator>\n              </Checkbox.Root>\n              <label htmlFor=\"show-spanish\" className=\"text-sm font-medium text-gray-700 cursor-pointer\">\n                Español\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        {/* Style Radio Group */}\n        <RadioGroup.Root\n          value={currentStyle}\n          onValueChange={(value) => onStyleChange(value as DescriptionStyle)}\n          className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-3\"\n        >\n          {Object.entries(styleConfigs).map(([style, config]) => {\n            const IconComponent = config.icon;\n            return (\n              <div key={style} className=\"relative\">\n                <RadioGroup.Item\n                  value={style}\n                  id={style}\n                  className=\"sr-only\"\n                />\n                <label\n                  htmlFor={style}\n                  className={`block p-4 rounded-xl border-2 cursor-pointer transition-all duration-200 hover:shadow-md ${\n                    currentStyle === style\n                      ? `${config.borderColor} ${config.bgColor} shadow-sm`\n                      : 'border-gray-200 bg-white hover:border-gray-300'\n                  }`}\n                >\n                  <div className=\"flex flex-col items-center text-center space-y-2\">\n                    <div className={`p-2 rounded-lg ${config.color} text-white`}>\n                      <IconComponent className=\"h-5 w-5\" />\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-800\">{config.label}</div>\n                      <div className=\"text-xs text-gray-500 mt-1\">{config.description}</div>\n                    </div>\n                  </div>\n                  {currentStyle === style && (\n                    <motion.div\n                      layoutId=\"style-indicator\"\n                      className=\"absolute top-2 right-2 w-3 h-3 bg-primary-600 rounded-full\"\n                      initial={false}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                    />\n                  )}\n                </label>\n              </div>\n            );\n          })}\n        </RadioGroup.Root>\n      </motion.div>\n\n      {/* Description Content */}\n      <motion.div variants={itemVariants} className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className={`p-2 rounded-lg ${currentConfig.color} text-white`}>\n              <currentConfig.icon className=\"h-4 w-4\" />\n            </div>\n            <h4 className=\"text-md font-medium text-gray-800\">\n              {currentConfig.label} Description\n            </h4>\n          </div>\n          \n          {currentDescription && (\n            <motion.button\n              onClick={handleRegenerate}\n              disabled={loading || isRegenerating}\n              className=\"flex items-center gap-2 px-3 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50\"\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <RefreshCw className={`h-4 w-4 ${(loading || isRegenerating) ? 'animate-spin' : ''}`} />\n              Regenerate\n            </motion.button>\n          )}\n        </div>\n        \n        <Tabs.Root\n          value={tabState.activeTab}\n          onValueChange={(value) => onTabStateChange({ ...tabState, activeTab: value })}\n          className={`border-2 rounded-xl ${currentConfig.borderColor} ${currentConfig.bgColor} overflow-hidden`}\n        >\n          {/* Tab List */}\n          <Tabs.List className=\"flex bg-white border-b border-gray-200\">\n            {tabState.showEnglish && (\n              <Tabs.Trigger\n                value=\"english\"\n                className=\"flex-1 px-4 py-3 text-sm font-medium text-gray-700 data-[state=active]:text-primary-600 data-[state=active]:bg-primary-50 data-[state=active]:border-b-2 data-[state=active]:border-primary-600 transition-all duration-200 hover:bg-gray-50\"\n              >\n                English\n              </Tabs.Trigger>\n            )}\n            {tabState.showSpanish && (\n              <Tabs.Trigger\n                value=\"spanish\"\n                className=\"flex-1 px-4 py-3 text-sm font-medium text-gray-700 data-[state=active]:text-primary-600 data-[state=active]:bg-primary-50 data-[state=active]:border-b-2 data-[state=active]:border-primary-600 transition-all duration-200 hover:bg-gray-50\"\n              >\n                Español\n              </Tabs.Trigger>\n            )}\n          </Tabs.List>\n          \n          {/* Tab Content */}\n          <div className=\"p-6\">\n            {/* Loading State */}\n            <AnimatePresence>\n              {loading && (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  className=\"flex items-center justify-center py-8 space-x-3\"\n                >\n                  <Sparkles className=\"h-5 w-5 text-primary-600 animate-pulse\" />\n                  <span className=\"text-gray-600\">Generating description...</span>\n                </motion.div>\n              )}\n            </AnimatePresence>\n            \n            {/* English Tab */}\n            {tabState.showEnglish && (\n              <Tabs.Content value=\"english\" className=\"outline-none\">\n                <AnimatePresence mode=\"wait\">\n                  {currentDescription && !loading ? (\n                    <motion.div\n                      key={`english-${currentDescription.id}`}\n                      variants={textVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      exit=\"exit\"\n                      className=\"prose prose-gray max-w-none\"\n                    >\n                      <p className=\"text-gray-800 leading-relaxed\">\n                        {currentDescription.english}\n                      </p>\n                    </motion.div>\n                  ) : !loading && (\n                    <motion.div\n                      variants={textVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      className=\"text-center py-8 text-gray-500\"\n                    >\n                      <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                      <p>No English description available for this style.</p>\n                      <p className=\"text-sm mt-2\">Try selecting a different image or regenerating the description.</p>\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </Tabs.Content>\n            )}\n            \n            {/* Spanish Tab */}\n            {tabState.showSpanish && (\n              <Tabs.Content value=\"spanish\" className=\"outline-none\">\n                <AnimatePresence mode=\"wait\">\n                  {currentDescription && !loading ? (\n                    <motion.div\n                      key={`spanish-${currentDescription.id}`}\n                      variants={textVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      exit=\"exit\"\n                      className=\"prose prose-gray max-w-none\"\n                    >\n                      <p className=\"text-gray-800 leading-relaxed\">\n                        {currentDescription.spanish}\n                      </p>\n                    </motion.div>\n                  ) : !loading && (\n                    <motion.div\n                      variants={textVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      className=\"text-center py-8 text-gray-500\"\n                    >\n                      <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                      <p>No hay descripción en español disponible para este estilo.</p>\n                      <p className=\"text-sm mt-2\">Prueba seleccionando una imagen diferente o regenerando la descripción.</p>\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </Tabs.Content>\n            )}\n          </div>\n        </Tabs.Root>\n        \n        {/* Description Meta Info */}\n        {currentDescription && !loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"text-xs text-gray-500 text-center space-y-1\"\n          >\n            <div>\n              Generated with {currentDescription.gptGenerated ? 'AI' : 'Human'} • \n              Created {new Date(currentDescription.createdAt).toLocaleString()}\n            </div>\n            {currentDescription.gptGenerated && (\n              <div className=\"flex items-center justify-center gap-1\">\n                <Sparkles className=\"h-3 w-3\" />\n                <span>Powered by AI for learning</span>\n              </div>\n            )}\n          </motion.div>\n        )}\n      </motion.div>\n    </motion.div>\n  );\n}"}