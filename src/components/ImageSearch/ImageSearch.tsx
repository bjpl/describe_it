import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, X, Filter } from 'lucide-react';
import { useDebounce, useImageSearch } from '@/hooks';
import { ImageGrid } from './ImageGrid';
import { PaginationControls } from './PaginationControls';
import { LoadingSpinner } from '@/components/Shared/LoadingStates/LoadingSpinner';
import { SearchFilters } from './SearchFilters';
import { UnsplashImage } from '@/types';

interface ImageSearchProps {
  onImageSelect?: (image: UnsplashImage) => void;
  className?: string;
}

export function ImageSearch({ onImageSelect, className = '' }: ImageSearchProps) {
  const [searchQuery, setSearchQuery] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    orientation: 'all' as 'all' | 'landscape' | 'portrait' | 'squarish',\n    category: 'all' as 'all' | 'nature' | 'people' | 'technology' | 'architecture',\n    color: 'all' as 'all' | 'black_and_white' | 'black' | 'white' | 'yellow' | 'orange' | 'red' | 'purple' | 'magenta' | 'green' | 'teal' | 'blue',\n  });\n\n  const debouncedQuery = useDebounce(searchQuery, 500);\n  const {\n    images,\n    loading,\n    error,\n    searchParams,\n    totalPages,\n    searchImages,\n    loadMoreImages,\n    setPage,\n    clearResults,\n  } = useImageSearch();\n\n  // Trigger search when debounced query changes\n  React.useEffect(() => {\n    if (debouncedQuery.trim()) {\n      searchImages(debouncedQuery);\n    } else {\n      clearResults();\n    }\n  }, [debouncedQuery, searchImages, clearResults]);\n\n  const handleClearSearch = () => {\n    setSearchQuery('');\n    clearResults();\n  };\n\n  const handleImageClick = (image: UnsplashImage) => {\n    if (onImageSelect) {\n      onImageSelect(image);\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: {\n        duration: 0.5,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  return (\n    <motion.div\n      className={`w-full max-w-6xl mx-auto space-y-6 ${className}`}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      {/* Search Header */}\n      <motion.div className=\"space-y-4\" variants={itemVariants}>\n        <div className=\"relative\">\n          <div className=\"relative flex items-center\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search for images (e.g., 'mountain sunset', 'city street', 'happy people')...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-12 pr-12 py-4 text-lg border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white shadow-sm hover:shadow-md\"\n            />\n            <AnimatePresence>\n              {searchQuery && (\n                <motion.button\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  onClick={handleClearSearch}\n                  className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-1 hover:bg-gray-100 rounded-full transition-colors\"\n                >\n                  <X className=\"h-5 w-5 text-gray-400\" />\n                </motion.button>\n              )}\n            </AnimatePresence>\n          </div>\n        </div>\n\n        {/* Filter Toggle */}\n        <div className=\"flex items-center justify-between\">\n          <motion.button\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors\"\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Filter className=\"h-4 w-4\" />\n            <span>Filters</span>\n          </motion.button>\n\n          {searchParams.query && (\n            <div className=\"text-sm text-gray-500\">\n              {images.length > 0 && (\n                <span>\n                  Showing {images.length} images for \"{searchParams.query}\"\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Search Filters */}\n        <AnimatePresence>\n          {showFilters && (\n            <SearchFilters\n              filters={filters}\n              onFiltersChange={setFilters}\n            />\n          )}\n        </AnimatePresence>\n      </motion.div>\n\n      {/* Loading State */}\n      <AnimatePresence>\n        {loading.isLoading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"flex flex-col items-center justify-center py-12 space-y-4\"\n          >\n            <LoadingSpinner size=\"lg\" />\n            <p className=\"text-gray-600\">{loading.message || 'Searching images...'}</p>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Error State */}\n      <AnimatePresence>\n        {error && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"bg-red-50 border border-red-200 rounded-xl p-6 text-center\"\n          >\n            <p className=\"text-red-600 font-medium mb-2\">Search Error</p>\n            <p className=\"text-red-500\">{error}</p>\n            <motion.button\n              onClick={() => searchImages(searchParams.query)}\n              className=\"mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              Try Again\n            </motion.button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Image Results */}\n      {!loading.isLoading && !error && images.length > 0 && (\n        <motion.div variants={itemVariants} className=\"space-y-6\">\n          <ImageGrid\n            images={images}\n            onImageClick={handleImageClick}\n            loading={loading.isLoading}\n          />\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <PaginationControls\n              currentPage={searchParams.page}\n              totalPages={totalPages}\n              onPageChange={setPage}\n              onLoadMore={loadMoreImages}\n              hasNextPage={searchParams.page < totalPages}\n              loading={loading.isLoading}\n            />\n          )}\n        </motion.div>\n      )}\n\n      {/* Empty State */}\n      {!loading.isLoading && !error && searchParams.query && images.length === 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center py-12 space-y-4\"\n        >\n          <div className=\"text-6xl mb-4\">üîç</div>\n          <h3 className=\"text-xl font-medium text-gray-700\">No images found</h3>\n          <p className=\"text-gray-500 max-w-md mx-auto\">\n            Try different keywords or check your spelling. Popular searches include nature, people, technology, and architecture.\n          </p>\n        </motion.div>\n      )}\n\n      {/* Initial State */}\n      {!searchParams.query && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center py-16 space-y-4\"\n        >\n          <div className=\"text-6xl mb-6\">üì∏</div>\n          <h2 className=\"text-2xl font-bold text-gray-800\">Discover Amazing Images</h2>\n          <p className=\"text-gray-600 max-w-md mx-auto\">\n            Search through millions of high-quality photos to practice your language skills.\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-2 mt-6\">\n            {['nature', 'people', 'city', 'food', 'animals', 'travel'].map((suggestion) => (\n              <motion.button\n                key={suggestion}\n                onClick={() => setSearchQuery(suggestion)}\n                className=\"px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full text-sm transition-colors\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                {suggestion}\n              </motion.button>\n            ))}\n          </div>\n        </motion.div>\n      )}\n    </motion.div>\n  );\n}"}