import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, ChevronLeft, ChevronRight, Download, Heart, User, Calendar, Maximize2, RotateCcw, Search } from 'lucide-react';\nimport * as Dialog from '@radix-ui/react-dialog';\nimport { UnsplashImage } from '@/types';\n\ninterface ImageViewerProps {\n  image: UnsplashImage | null;\n  images: UnsplashImage[];\n  currentIndex: number;\n  isOpen: boolean;\n  onClose: () => void;\n  onNavigate: (direction: 'prev' | 'next') => void;\n  onNewSearch: () => void;\n  onAnotherImage: () => void;\n}\n\nexport function ImageViewer({\n  image,\n  images,\n  currentIndex,\n  isOpen,\n  onClose,\n  onNavigate,\n  onNewSearch,\n  onAnotherImage\n}: ImageViewerProps) {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    if (image) {\n      setImageLoaded(false);\n    }\n  }, [image]);\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (!isOpen) return;\n      \n      switch (e.key) {\n        case 'Escape':\n          onClose();\n          break;\n        case 'ArrowLeft':\n          if (currentIndex > 0) onNavigate('prev');\n          break;\n        case 'ArrowRight':\n          if (currentIndex < images.length - 1) onNavigate('next');\n          break;\n        case 'f':\n        case 'F':\n          setIsFullscreen(!isFullscreen);\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isOpen, currentIndex, images.length, isFullscreen, onClose, onNavigate]);\n\n  // Auto-hide controls after inactivity\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    \n    if (showControls && isFullscreen) {\n      timeout = setTimeout(() => {\n        setShowControls(false);\n      }, 3000);\n    }\n    \n    return () => clearTimeout(timeout);\n  }, [showControls, isFullscreen]);\n\n  const handleDownload = async () => {\n    if (!image) return;\n    \n    try {\n      const response = await fetch(image.urls.full);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `unsplash-${image.id}-${image.user.username}.jpg`;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Download failed:', error);\n    }\n  };\n\n  if (!image) return null;\n\n  const modalVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: { \n      opacity: 1, \n      scale: 1,\n      transition: {\n        duration: 0.3,\n        ease: \"easeOut\"\n      }\n    },\n    exit: { \n      opacity: 0, \n      scale: 0.8,\n      transition: {\n        duration: 0.2\n      }\n    }\n  };\n\n  const controlsVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: {\n        duration: 0.2\n      }\n    }\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={onClose}>\n      <Dialog.Portal>\n        <Dialog.Overlay className=\"fixed inset-0 bg-black bg-opacity-90 z-50\" />\n        <Dialog.Content \n          className=\"fixed inset-0 z-50 flex items-center justify-center p-4\"\n          onPointerMove={() => setShowControls(true)}\n        >\n          <motion.div\n            className={`relative w-full h-full flex flex-col ${\n              isFullscreen ? '' : 'max-w-6xl max-h-[90vh]'\n            }`}\n            variants={modalVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n          >\n            {/* Header Controls */}\n            <AnimatePresence>\n              {showControls && (\n                <motion.div\n                  variants={controlsVariants}\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  exit=\"hidden\"\n                  className=\"absolute top-4 left-4 right-4 z-10 flex items-center justify-between\"\n                >\n                  <div className=\"flex items-center gap-4\">\n                    {/* Close Button */}\n                    <motion.button\n                      onClick={onClose}\n                      className=\"p-2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full transition-all duration-200 backdrop-blur-sm\"\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <X className=\"h-5 w-5\" />\n                    </motion.button>\n                    \n                    {/* Image Counter */}\n                    <div className=\"bg-black bg-opacity-50 text-white px-3 py-2 rounded-full text-sm backdrop-blur-sm\">\n                      {currentIndex + 1} of {images.length}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    {/* Download Button */}\n                    <motion.button\n                      onClick={handleDownload}\n                      className=\"p-2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full transition-all duration-200 backdrop-blur-sm\"\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Download className=\"h-5 w-5\" />\n                    </motion.button>\n                    \n                    {/* Fullscreen Toggle */}\n                    <motion.button\n                      onClick={() => setIsFullscreen(!isFullscreen)}\n                      className=\"p-2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full transition-all duration-200 backdrop-blur-sm\"\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Maximize2 className=\"h-5 w-5\" />\n                    </motion.button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n            \n            {/* Main Image */}\n            <div className=\"flex-1 flex items-center justify-center relative\">\n              {/* Loading State */}\n              <AnimatePresence>\n                {!imageLoaded && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50\"\n                  >\n                    <div className=\"w-12 h-12 border-4 border-white border-t-transparent rounded-full animate-spin\" />\n                  </motion.div>\n                )}\n              </AnimatePresence>\n              \n              <motion.img\n                key={image.id}\n                src={image.urls.regular}\n                alt={image.alt_description || image.description || 'Image'}\n                className=\"max-w-full max-h-full object-contain\"\n                onLoad={() => setImageLoaded(true)}\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: imageLoaded ? 1 : 0, scale: 1 }}\n                transition={{ duration: 0.3 }}\n              />\n              \n              {/* Navigation Arrows */}\n              <AnimatePresence>\n                {showControls && images.length > 1 && (\n                  <>\n                    {/* Previous */}\n                    {currentIndex > 0 && (\n                      <motion.button\n                        onClick={() => onNavigate('prev')}\n                        className=\"absolute left-4 top-1/2 transform -translate-y-1/2 p-3 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full transition-all duration-200 backdrop-blur-sm\"\n                        variants={controlsVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        exit=\"hidden\"\n                        whileHover={{ scale: 1.1 }}\n                        whileTap={{ scale: 0.9 }}\n                      >\n                        <ChevronLeft className=\"h-6 w-6\" />\n                      </motion.button>\n                    )}\n                    \n                    {/* Next */}\n                    {currentIndex < images.length - 1 && (\n                      <motion.button\n                        onClick={() => onNavigate('next')}\n                        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-3 bg-black bg-opacity-50 hover:bg-opacity-70 text-white rounded-full transition-all duration-200 backdrop-blur-sm\"\n                        variants={controlsVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        exit=\"hidden\"\n                        whileHover={{ scale: 1.1 }}\n                        whileTap={{ scale: 0.9 }}\n                      >\n                        <ChevronRight className=\"h-6 w-6\" />\n                      </motion.button>\n                    )}\n                  </>\n                )}\n              </AnimatePresence>\n            </div>\n            \n            {/* Bottom Controls */}\n            <AnimatePresence>\n              {showControls && (\n                <motion.div\n                  variants={controlsVariants}\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  exit=\"hidden\"\n                  className=\"absolute bottom-4 left-4 right-4 z-10 space-y-4\"\n                >\n                  {/* Image Info */}\n                  <div className=\"bg-black bg-opacity-50 backdrop-blur-sm rounded-lg p-4 text-white space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2 flex-1\">\n                        {/* Description */}\n                        {(image.description || image.alt_description) && (\n                          <p className=\"text-sm leading-relaxed\">\n                            {image.description || image.alt_description}\n                          </p>\n                        )}\n                        \n                        {/* User Info */}\n                        <div className=\"flex items-center gap-4 text-xs text-gray-300\">\n                          <div className=\"flex items-center gap-1\">\n                            <User className=\"h-3 w-3\" />\n                            <span>by {image.user.name} (@{image.user.username})</span>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            <span>{new Date(image.created_at).toLocaleDateString()}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-1\">\n                            <Heart className=\"h-3 w-3\" />\n                            <span>{image.likes} likes</span>\n                          </div>\n                        </div>\n                        \n                        {/* Dimensions */}\n                        <div className=\"text-xs text-gray-400\">\n                          {image.width} × {image.height} pixels\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Action Buttons */}\n                  <div className=\"flex items-center justify-center gap-3\">\n                    <motion.button\n                      onClick={onAnotherImage}\n                      className=\"flex items-center gap-2 px-6 py-3 bg-white bg-opacity-10 hover:bg-opacity-20 text-white rounded-full font-medium transition-all duration-200 backdrop-blur-sm\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <RotateCcw className=\"h-4 w-4\" />\n                      Another Image\n                    </motion.button>\n                    \n                    <motion.button\n                      onClick={onNewSearch}\n                      className=\"flex items-center gap-2 px-6 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-full font-medium transition-all duration-200\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <Search className=\"h-4 w-4\" />\n                      New Search\n                    </motion.button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n            \n            {/* Keyboard Shortcuts Helper */}\n            <AnimatePresence>\n              {showControls && !isFullscreen && (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  className=\"absolute top-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-50 text-white text-xs px-3 py-2 rounded-full backdrop-blur-sm\"\n                >\n                  Press F for fullscreen • ← → to navigate • ESC to close\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.div>\n        </Dialog.Content>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n}"}