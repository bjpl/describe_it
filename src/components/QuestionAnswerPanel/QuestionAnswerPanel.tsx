import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ChevronLeft, ChevronRight, Eye, EyeOff, CheckCircle, XCircle, HelpCircle, Target, Trophy, Clock, BookOpen } from 'lucide-react';\nimport { Question, UserAnswer, AnswerSession } from '@/types';\n\ninterface QuestionAnswerPanelProps {\n  session: AnswerSession;\n  onAnswerSubmit: (answer: string) => void;\n  onNextQuestion: () => void;\n  onPrevQuestion: () => void;\n  onRevealAnswer: () => void;\n  loading: boolean;\n  className?: string;\n}\n\nexport function QuestionAnswerPanel({\n  session,\n  onAnswerSubmit,\n  onNextQuestion,\n  onPrevQuestion,\n  onRevealAnswer,\n  loading,\n  className = ''\n}: QuestionAnswerPanelProps) {\n  const [userAnswer, setUserAnswer] = useState('');\n  const [showGptAnswer, setShowGptAnswer] = useState(false);\n  const [answerRevealed, setAnswerRevealed] = useState(false);\n  \n  const currentQuestion = session.questions[session.currentQuestionIndex];\n  const currentAnswer = session.userAnswers.find(a => a.questionId === currentQuestion?.id);\n  const progress = ((session.currentQuestionIndex + 1) / session.questions.length) * 100;\n  const correctAnswers = session.userAnswers.filter(a => a.isCorrect).length;\n  \n  useEffect(() => {\n    // Reset states when question changes\n    setShowGptAnswer(false);\n    setAnswerRevealed(false);\n    setUserAnswer(currentAnswer?.answer || '');\n  }, [session.currentQuestionIndex, currentAnswer]);\n\n  const handleSubmitAnswer = () => {\n    if (userAnswer.trim() && !currentAnswer) {\n      onAnswerSubmit(userAnswer.trim());\n    }\n  };\n\n  const handleRevealAnswer = () => {\n    setShowGptAnswer(true);\n    setAnswerRevealed(true);\n    onRevealAnswer();\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'basic': return 'text-green-600 bg-green-100';\n      case 'intermediate': return 'text-yellow-600 bg-yellow-100';\n      case 'advanced': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 10 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  const slideVariants = {\n    enter: { x: 300, opacity: 0 },\n    center: { x: 0, opacity: 1 },\n    exit: { x: -300, opacity: 0 }\n  };\n\n  if (!currentQuestion) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n        <p>No questions available for this image.</p>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      className={`w-full max-w-4xl mx-auto space-y-6 ${className}`}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      {/* Progress Header */}\n      <motion.div variants={itemVariants} className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Practice Questions</h3>\n            <div className=\"flex items-center gap-2\">\n              <Trophy className=\"h-4 w-4 text-yellow-500\" />\n              <span className=\"text-sm font-medium text-gray-600\">\n                {correctAnswers}/{session.questions.length} correct\n              </span>\n            </div>\n          </div>\n          \n          <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n            getDifficultyColor(currentQuestion.category)\n          }`}>\n            {currentQuestion.category.toUpperCase()}\n          </div>\n        </div>\n        \n        {/* Progress Bar */}\n        <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n          <motion.div\n            className=\"h-full bg-primary-600 rounded-full\"\n            initial={{ width: 0 }}\n            animate={{ width: `${progress}%` }}\n            transition={{ duration: 0.5, ease: \"easeOut\" }}\n          />\n        </div>\n        \n        <div className=\"flex items-center justify-between text-sm text-gray-600\">\n          <span>Question {session.currentQuestionIndex + 1} of {session.questions.length}</span>\n          <span>{Math.round(progress)}% Complete</span>\n        </div>\n      </motion.div>\n\n      {/* Question Card */}\n      <motion.div variants={itemVariants}>\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentQuestion.id}\n            variants={slideVariants}\n            initial=\"enter\"\n            animate=\"center\"\n            exit=\"exit\"\n            transition={{ duration: 0.3 }}\n            className=\"bg-white border-2 border-gray-200 rounded-xl p-6 space-y-6\"\n          >\n            {/* Question */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"p-2 bg-primary-100 rounded-lg\">\n                  <HelpCircle className=\"h-5 w-5 text-primary-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-lg font-medium text-gray-800 leading-relaxed\">\n                    {currentQuestion.text}\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            {/* Answer Input */}\n            {!currentAnswer && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">\n                    Your Answer\n                  </label>\n                  <textarea\n                    value={userAnswer}\n                    onChange={(e) => setUserAnswer(e.target.value)}\n                    placeholder=\"Type your answer here...\"\n                    className=\"w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 resize-none h-24 transition-all duration-200\"\n                    disabled={loading}\n                  />\n                </div>\n                \n                <motion.button\n                  onClick={handleSubmitAnswer}\n                  disabled={!userAnswer.trim() || loading}\n                  className=\"w-full bg-primary-600 hover:bg-primary-700 disabled:bg-gray-400 text-white py-3 rounded-lg font-medium transition-colors flex items-center justify-center gap-2\"\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  {loading ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                      Checking Answer...\n                    </>\n                  ) : (\n                    <>\n                      <Target className=\"h-4 w-4\" />\n                      Submit Answer\n                    </>\n                  )}\n                </motion.button>\n              </div>\n            )}\n            \n            {/* User Answer Result */}\n            {currentAnswer && (\n              <div className=\"space-y-4\">\n                <div className={`p-4 rounded-lg border-2 ${\n                  currentAnswer.isCorrect \n                    ? 'bg-green-50 border-green-200' \n                    : 'bg-red-50 border-red-200'\n                }`}>\n                  <div className=\"flex items-start gap-3\">\n                    {currentAnswer.isCorrect ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                    ) : (\n                      <XCircle className=\"h-5 w-5 text-red-600 mt-0.5\" />\n                    )}\n                    <div className=\"flex-1\">\n                      <div className={`font-medium mb-2 ${\n                        currentAnswer.isCorrect ? 'text-green-800' : 'text-red-800'\n                      }`}>\n                        {currentAnswer.isCorrect ? 'Correct!' : 'Not quite right'}\n                      </div>\n                      <div className=\"text-gray-700\">\n                        <strong>Your answer:</strong> {currentAnswer.answer}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Reveal Answer Button */}\n                {!showGptAnswer && (\n                  <motion.button\n                    onClick={handleRevealAnswer}\n                    className=\"flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg font-medium transition-colors mx-auto\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                    Reveal Expected Answer\n                  </motion.button>\n                )}\n              </div>\n            )}\n            \n            {/* GPT Answer */}\n            <AnimatePresence>\n              {showGptAnswer && (\n                <motion.div\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: 'auto' }}\n                  exit={{ opacity: 0, height: 0 }}\n                  className=\"bg-blue-50 border-2 border-blue-200 rounded-lg p-4\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"p-1 bg-blue-100 rounded\">\n                      <BookOpen className=\"h-4 w-4 text-blue-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-blue-800 mb-2\">Expected Answer</div>\n                      <div className=\"text-gray-700 leading-relaxed\">\n                        {currentQuestion.expectedAnswer}\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n            \n            {/* Hints */}\n            {currentQuestion.hints.length > 0 && !currentAnswer && (\n              <div className=\"bg-yellow-50 border-2 border-yellow-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"p-1 bg-yellow-100 rounded\">\n                    <HelpCircle className=\"h-4 w-4 text-yellow-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-yellow-800 mb-2\">Hints</div>\n                    <ul className=\"text-gray-700 space-y-1\">\n                      {currentQuestion.hints.map((hint, index) => (\n                        <li key={index} className=\"text-sm\">• {hint}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n          </motion.div>\n        </AnimatePresence>\n      </motion.div>\n\n      {/* Navigation */}\n      <motion.div variants={itemVariants} className=\"flex items-center justify-between\">\n        <motion.button\n          onClick={onPrevQuestion}\n          disabled={session.currentQuestionIndex === 0}\n          className=\"flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n          Previous\n        </motion.button>\n        \n        <div className=\"flex items-center gap-2\">\n          {session.questions.map((_, index) => (\n            <div\n              key={index}\n              className={`w-3 h-3 rounded-full transition-all duration-200 ${\n                index === session.currentQuestionIndex\n                  ? 'bg-primary-600 scale-125'\n                  : session.userAnswers.find(a => a.questionId === session.questions[index].id)\n                    ? session.userAnswers.find(a => a.questionId === session.questions[index].id)?.isCorrect\n                      ? 'bg-green-500'\n                      : 'bg-red-500'\n                    : 'bg-gray-300'\n              }`}\n            />\n          ))}\n        </div>\n        \n        <motion.button\n          onClick={onNextQuestion}\n          disabled={session.currentQuestionIndex === session.questions.length - 1}\n          className=\"flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n        >\n          Next\n          <ChevronRight className=\"h-4 w-4\" />\n        </motion.button>\n      </motion.div>\n      \n      {/* Session Summary */}\n      {session.completed && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200 rounded-xl p-6 text-center space-y-4\"\n        >\n          <div className=\"flex items-center justify-center mb-4\">\n            <Trophy className=\"h-12 w-12 text-yellow-500\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-gray-800\">Session Complete!</h3>\n          <div className=\"flex items-center justify-center gap-6 text-sm text-gray-600\">\n            <div className=\"flex items-center gap-1\">\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n              <span>{correctAnswers} Correct</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <XCircle className=\"h-4 w-4 text-red-500\" />\n              <span>{session.questions.length - correctAnswers} Incorrect</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4 text-blue-500\" />\n              <span>{session.score}% Score</span>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </motion.div>\n  );\n}"}