import React, { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Plus, Check, BookOpen, Filter, Search, ArrowUpDown, Globe, Star, Trash2, Volume2 } from 'lucide-react';\nimport * as Checkbox from '@radix-ui/react-checkbox';\nimport * as RadioGroup from '@radix-ui/react-radio-group';\nimport { ExtractedPhrase, PhraseCategory, PhraseBankEntry } from '@/types';\n\ninterface PhraseExtractorProps {\n  phrases: ExtractedPhrase[];\n  selectedPhrases: PhraseBankEntry[];\n  onAddPhrase: (phrase: ExtractedPhrase) => void;\n  onRemovePhrase: (phraseId: string) => void;\n  onSpeakPhrase: (text: string, lang: 'en' | 'es') => void;\n  loading: boolean;\n  className?: string;\n}\n\nconst categoryConfigs = {\n  nouns: {\n    label: 'Nouns',\n    color: 'bg-blue-500',\n    bgColor: 'bg-blue-50',\n    borderColor: 'border-blue-200',\n    icon: 'üè∑Ô∏è'\n  },\n  verbs: {\n    label: 'Verbs',\n    color: 'bg-green-500',\n    bgColor: 'bg-green-50',\n    borderColor: 'border-green-200',\n    icon: '‚ö°'\n  },\n  adjectives: {\n    label: 'Adjectives',\n    color: 'bg-purple-500',\n    bgColor: 'bg-purple-50',\n    borderColor: 'border-purple-200',\n    icon: 'üé®'\n  },\n  phrases: {\n    label: 'Phrases',\n    color: 'bg-orange-500',\n    bgColor: 'bg-orange-50',\n    borderColor: 'border-orange-200',\n    icon: 'üí¨'\n  },\n  idioms: {\n    label: 'Idioms',\n    color: 'bg-red-500',\n    bgColor: 'bg-red-50',\n    borderColor: 'border-red-200',\n    icon: 'üé≠'\n  }\n};\n\nconst difficultyConfigs = {\n  beginner: {\n    label: 'Beginner',\n    color: 'text-green-600 bg-green-100'\n  },\n  intermediate: {\n    label: 'Intermediate',\n    color: 'text-yellow-600 bg-yellow-100'\n  },\n  advanced: {\n    label: 'Advanced',\n    color: 'text-red-600 bg-red-100'\n  }\n};\n\nexport function PhraseExtractor({\n  phrases,\n  selectedPhrases,\n  onAddPhrase,\n  onRemovePhrase,\n  onSpeakPhrase,\n  loading,\n  className = ''\n}: PhraseExtractorProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState<Set<PhraseCategory>>(new Set());\n  const [selectedDifficulties, setSelectedDifficulties] = useState<Set<string>>(new Set());\n  const [sortBy, setSortBy] = useState<'alphabetical' | 'difficulty' | 'category'>('alphabetical');\n  const [showOnlyUnselected, setShowOnlyUnselected] = useState(false);\n\n  // Create a set of selected phrase IDs for quick lookup\n  const selectedPhraseIds = useMemo(\n    () => new Set(selectedPhrases.map(entry => entry.phrase.id)),\n    [selectedPhrases]\n  );\n\n  // Filter and sort phrases\n  const filteredAndSortedPhrases = useMemo(() => {\n    let filtered = phrases;\n\n    // Filter by search query\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(phrase => \n        phrase.text.toLowerCase().includes(query) ||\n        phrase.translation.toLowerCase().includes(query)\n      );\n    }\n\n    // Filter by categories\n    if (selectedCategories.size > 0) {\n      filtered = filtered.filter(phrase => selectedCategories.has(phrase.category));\n    }\n\n    // Filter by difficulties\n    if (selectedDifficulties.size > 0) {\n      filtered = filtered.filter(phrase => selectedDifficulties.has(phrase.difficulty));\n    }\n\n    // Filter by selection status\n    if (showOnlyUnselected) {\n      filtered = filtered.filter(phrase => !selectedPhraseIds.has(phrase.id));\n    }\n\n    // Sort phrases\n    const sorted = [...filtered].sort((a, b) => {\n      switch (sortBy) {\n        case 'alphabetical':\n          return a.text.localeCompare(b.text);\n        case 'difficulty':\n          const difficultyOrder = { beginner: 0, intermediate: 1, advanced: 2 };\n          return difficultyOrder[a.difficulty] - difficultyOrder[b.difficulty];\n        case 'category':\n          return a.category.localeCompare(b.category);\n        default:\n          return 0;\n      }\n    });\n\n    return sorted;\n  }, [phrases, searchQuery, selectedCategories, selectedDifficulties, sortBy, showOnlyUnselected, selectedPhraseIds]);\n\n  // Group phrases by category for display\n  const groupedPhrases = useMemo(() => {\n    const groups: Record<PhraseCategory, ExtractedPhrase[]> = {\n      nouns: [],\n      verbs: [],\n      adjectives: [],\n      phrases: [],\n      idioms: []\n    };\n\n    filteredAndSortedPhrases.forEach(phrase => {\n      groups[phrase.category].push(phrase);\n    });\n\n    return groups;\n  }, [filteredAndSortedPhrases]);\n\n  const handleCategoryToggle = (category: PhraseCategory) => {\n    const newSelected = new Set(selectedCategories);\n    if (newSelected.has(category)) {\n      newSelected.delete(category);\n    } else {\n      newSelected.add(category);\n    }\n    setSelectedCategories(newSelected);\n  };\n\n  const handleDifficultyToggle = (difficulty: string) => {\n    const newSelected = new Set(selectedDifficulties);\n    if (newSelected.has(difficulty)) {\n      newSelected.delete(difficulty);\n    } else {\n      newSelected.add(difficulty);\n    }\n    setSelectedDifficulties(newSelected);\n  };\n\n  const isPhraseSelected = (phraseId: string) => selectedPhraseIds.has(phraseId);\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 10 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  const phraseVariants = {\n    hidden: { opacity: 0, scale: 0.9 },\n    visible: { \n      opacity: 1, \n      scale: 1,\n      transition: {\n        duration: 0.2\n      }\n    },\n    exit: { \n      opacity: 0, \n      scale: 0.9,\n      transition: {\n        duration: 0.2\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12 space-y-4\">\n        <div className=\"w-8 h-8 border-4 border-primary-600 border-t-transparent rounded-full animate-spin\" />\n        <p className=\"text-gray-600 ml-4\">Extracting phrases from description...</p>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      className={`w-full max-w-6xl mx-auto space-y-6 ${className}`}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      {/* Header and Controls */}\n      <motion.div variants={itemVariants} className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-800 flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5 text-primary-600\" />\n            Extracted Phrases\n          </h3>\n          \n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span>{filteredAndSortedPhrases.length} phrases</span>\n            <span>‚Ä¢</span>\n            <span>{selectedPhrases.length} selected</span>\n          </div>\n        </div>\n        \n        {/* Search and Filters */}\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          {/* Search */}\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search phrases or translations...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200\"\n            />\n          </div>\n          \n          {/* Sort */}\n          <div className=\"flex items-center gap-2\">\n            <ArrowUpDown className=\"h-4 w-4 text-gray-400\" />\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value as any)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200\"\n            >\n              <option value=\"alphabetical\">Alphabetical</option>\n              <option value=\"difficulty\">Difficulty</option>\n              <option value=\"category\">Category</option>\n            </select>\n          </div>\n          \n          {/* Show only unselected */}\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox.Root\n              id=\"show-unselected\"\n              checked={showOnlyUnselected}\n              onCheckedChange={(checked) => setShowOnlyUnselected(!!checked)}\n              className=\"flex h-5 w-5 appearance-none items-center justify-center rounded border border-gray-300 bg-white data-[state=checked]:bg-primary-600 data-[state=checked]:border-primary-600\"\n            >\n              <Checkbox.Indicator className=\"text-white\">\n                <Check className=\"h-3 w-3\" />\n              </Checkbox.Indicator>\n            </Checkbox.Root>\n            <label htmlFor=\"show-unselected\" className=\"text-sm text-gray-700 cursor-pointer whitespace-nowrap\">\n              Show only unselected\n            </label>\n          </div>\n        </div>\n        \n        {/* Category Filters */}\n        <div className=\"flex flex-wrap gap-2\">\n          {Object.entries(categoryConfigs).map(([category, config]) => (\n            <motion.button\n              key={category}\n              onClick={() => handleCategoryToggle(category as PhraseCategory)}\n              className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${\n                selectedCategories.has(category as PhraseCategory)\n                  ? `${config.color} text-white`\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <span>{config.icon}</span>\n              {config.label}\n              {groupedPhrases[category as PhraseCategory].length > 0 && (\n                <span className=\"bg-white bg-opacity-20 px-2 py-0.5 rounded-full text-xs\">\n                  {groupedPhrases[category as PhraseCategory].length}\n                </span>\n              )}\n            </motion.button>\n          ))}\n        </div>\n        \n        {/* Difficulty Filters */}\n        <div className=\"flex flex-wrap gap-2\">\n          {Object.entries(difficultyConfigs).map(([difficulty, config]) => (\n            <motion.button\n              key={difficulty}\n              onClick={() => handleDifficultyToggle(difficulty)}\n              className={`px-3 py-1 rounded-full text-xs font-medium transition-all duration-200 ${\n                selectedDifficulties.has(difficulty)\n                  ? config.color\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              {config.label}\n            </motion.button>\n          ))}\n        </div>\n      </motion.div>\n      \n      {/* Phrases by Category */}\n      <motion.div variants={itemVariants} className=\"space-y-6\">\n        {Object.entries(groupedPhrases).map(([category, categoryPhrases]) => {\n          if (categoryPhrases.length === 0) return null;\n          \n          const config = categoryConfigs[category as PhraseCategory];\n          \n          return (\n            <div key={category} className={`border-2 rounded-xl ${config.borderColor} ${config.bgColor} overflow-hidden`}>\n              {/* Category Header */}\n              <div className={`${config.color} text-white px-6 py-4 flex items-center justify-between`}>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-2xl\">{config.icon}</span>\n                  <h4 className=\"text-lg font-semibold\">{config.label}</h4>\n                  <span className=\"bg-white bg-opacity-20 px-3 py-1 rounded-full text-sm font-medium\">\n                    {categoryPhrases.length}\n                  </span>\n                </div>\n              </div>\n              \n              {/* Phrases Grid */}\n              <div className=\"p-6\">\n                <motion.div \n                  className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"\n                  layout\n                >\n                  <AnimatePresence>\n                    {categoryPhrases.map((phrase) => {\n                      const isSelected = isPhraseSelected(phrase.id);\n                      \n                      return (\n                        <motion.div\n                          key={phrase.id}\n                          variants={phraseVariants}\n                          initial=\"hidden\"\n                          animate=\"visible\"\n                          exit=\"exit\"\n                          layout\n                          className={`bg-white border-2 rounded-lg p-4 space-y-3 transition-all duration-200 ${\n                            isSelected \n                              ? 'border-primary-500 shadow-md' \n                              : 'border-gray-200 hover:border-gray-300 hover:shadow-sm'\n                          }`}\n                        >\n                          {/* Phrase Content */}\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1 space-y-1\">\n                                <div className=\"flex items-center gap-2\">\n                                  <p className=\"font-medium text-gray-800\">{phrase.text}</p>\n                                  <button\n                                    onClick={() => onSpeakPhrase(phrase.text, 'en')}\n                                    className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors\"\n                                    title=\"Listen to English pronunciation\"\n                                  >\n                                    <Volume2 className=\"h-3 w-3\" />\n                                  </button>\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <p className=\"text-sm text-gray-600\">{phrase.translation}</p>\n                                  <button\n                                    onClick={() => onSpeakPhrase(phrase.translation, 'es')}\n                                    className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors\"\n                                    title=\"Listen to Spanish pronunciation\"\n                                  >\n                                    <Globe className=\"h-3 w-3\" />\n                                  </button>\n                                </div>\n                              </div>\n                              \n                              <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n                                difficultyConfigs[phrase.difficulty].color\n                              }`}>\n                                {difficultyConfigs[phrase.difficulty].label}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Action Button */}\n                          <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\n                            {isSelected ? (\n                              <motion.button\n                                onClick={() => onRemovePhrase(phrase.id)}\n                                className=\"flex items-center gap-2 px-3 py-2 bg-red-50 hover:bg-red-100 text-red-600 rounded-lg text-sm font-medium transition-colors\"\n                                whileHover={{ scale: 1.05 }}\n                                whileTap={{ scale: 0.95 }}\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                                Remove\n                              </motion.button>\n                            ) : (\n                              <motion.button\n                                onClick={() => onAddPhrase(phrase)}\n                                className=\"flex items-center gap-2 px-3 py-2 bg-primary-50 hover:bg-primary-100 text-primary-600 rounded-lg text-sm font-medium transition-colors\"\n                                whileHover={{ scale: 1.05 }}\n                                whileTap={{ scale: 0.95 }}\n                              >\n                                <Plus className=\"h-3 w-3\" />\n                                Add to Bank\n                              </motion.button>\n                            )}\n                            \n                            {isSelected && (\n                              <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                                <Star className=\"h-3 w-3 text-yellow-500\" />\n                                <span>In bank</span>\n                              </div>\n                            )}\n                          </div>\n                        </motion.div>\n                      );\n                    })}\n                  </AnimatePresence>\n                </motion.div>\n              </div>\n            </div>\n          );\n        })}\n      </motion.div>\n      \n      {/* Empty State */}\n      {filteredAndSortedPhrases.length === 0 && !loading && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center py-12 space-y-4\"\n        >\n          <div className=\"text-6xl mb-4\">üìö</div>\n          <h3 className=\"text-xl font-medium text-gray-700\">No phrases found</h3>\n          <p className=\"text-gray-500 max-w-md mx-auto\">\n            {phrases.length === 0\n              ? 'Select an image and generate a description to extract learning phrases.'\n              : 'Try adjusting your search terms or filters to find phrases.'}\n          </p>\n        </motion.div>\n      )}\n    </motion.div>\n  );\n}"}