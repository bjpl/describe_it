  /**
   * Sign up new user
   */
  async signUp(email: string, password: string, metadata?: {
    full_name?: string;
    username?: string;
  }): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('[AuthManager] Starting signup for:', email);
      
      // Always use server-side proxy to avoid CORS issues
      const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password, metadata })
      });
      
      const result = await response.json();
      
      if (!response.ok) {
        console.error('[AuthManager] Signup failed:', result);
        
        // Handle specific error cases
        if (result.error?.includes('already registered')) {
          return {
            success: false,
            error: 'This email is already registered. Please sign in instead.'
          };
        }
        
        return {
          success: false,
          error: result.error || 'Failed to create account'
        };
      }
      
      console.log('[AuthManager] Signup successful:', {
        hasUser: !!result.user,
        hasSession: !!result.session,
        needsConfirmation: result.needsEmailConfirmation
      });
      
      // If we got a session, set it up
      if (result.session) {
        this.currentUser = result.user as any;
        this.currentSession = result.session as any;
        
        // Also set in Supabase client for consistency
        const client = (typeof window !== 'undefined' && supabaseSimple) ? supabaseSimple : supabase;
        await client.auth.setSession({
          access_token: result.session.access_token,
          refresh_token: result.session.refresh_token
        });
        
        // Load or create user profile
        if (result.user?.id) {
          await this.createUserProfile(result.user.id, {
            email,
            full_name: metadata?.full_name,
            username: metadata?.username
          });
        }
        
        this.notifyListeners();
      }
      
      return { 
        success: true,
        error: result.needsEmailConfirmation 
          ? 'Please check your email to confirm your account'
          : undefined
      };
      
    } catch (error: any) {
      logger.error('Sign up failed', error);
      console.error('[AuthManager] Signup error:', error);
      
      // If the server is completely unreachable, provide clear error
      if (error.message?.includes('Failed to fetch')) {
        return {
          success: false,
          error: 'Unable to connect to authentication service. Please check your connection and try again.'
        };
      }
      
      return { 
        success: false, 
        error: error.message || 'Failed to sign up' 
      };
    }
  }