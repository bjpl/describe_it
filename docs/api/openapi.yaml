openapi: 3.0.0
info:
  title: Describe It API
  version: 2.0.0
  description: |
    Comprehensive API for image description generation, vocabulary management,
    and language learning features powered by Claude Sonnet 4.5.

    ## Key Features
    - Multi-language AI image descriptions (English/Spanish)
    - Vocabulary list management with mastery tracking
    - Q&A generation from image descriptions
    - Image search with Unsplash integration
    - Progress tracking and analytics
    - User authentication with Supabase

  contact:
    name: API Support
    email: brandon.lambert87@gmail.com

servers:
  - url: https://describe-it-lovat.vercel.app/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Descriptions
    description: AI-powered image description generation
  - name: Vocabulary
    description: Vocabulary list and item management
  - name: Images
    description: Image search and proxy services
  - name: Q&A
    description: Question and answer generation
  - name: Progress
    description: Learning progress tracking

security:
  - BearerAuth: []

paths:
  /auth/signup:
    post:
      tags: [Authentication]
      summary: Create new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, firstName, lastName]
              properties:
                email: {type: string, format: email}
                password: {type: string, minLength: 8}
                firstName: {type: string}
                lastName: {type: string}
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: {type: boolean}
                  user: {$ref: '#/components/schemas/User'}
                  session: {$ref: '#/components/schemas/Session'}
        '400': {$ref: '#/components/responses/BadRequest'}

  /auth/signin:
    post:
      tags: [Authentication]
      summary: Sign in existing user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: {type: string, format: email}
                password: {type: string}
                rememberMe: {type: boolean}
      responses:
        '200':
          description: Sign in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: {type: boolean}
                  user: {$ref: '#/components/schemas/User'}
                  session: {$ref: '#/components/schemas/Session'}
        '401': {$ref: '#/components/responses/Unauthorized'}

  /descriptions/generate:
    post:
      tags: [Descriptions]
      summary: Generate image descriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [imageUrl]
              properties:
                imageUrl: {type: string}
                style: {type: string, enum: [narrativo, poetico, academico, conversacional, infantil]}
                maxLength: {type: integer, minimum: 50, maximum: 1000}
                customPrompt: {type: string}
      responses:
        '200':
          description: Descriptions generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: {type: boolean}
                  data:
                    type: array
                    items: {$ref: '#/components/schemas/Description'}

  /vocabulary/save:
    post:
      tags: [Vocabulary]
      summary: Save vocabulary items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vocabulary: {$ref: '#/components/schemas/VocabularyItem'}
                collectionName: {type: string}
      responses:
        '201':
          description: Vocabulary saved successfully
    get:
      tags: [Vocabulary]
      summary: Retrieve vocabulary items
      parameters:
        - name: collectionName
          in: query
          schema: {type: string}
        - name: difficulty
          in: query
          schema: {type: string, enum: [beginner, intermediate, advanced]}
      responses:
        '200':
          description: Vocabulary retrieved successfully

  /images/search:
    get:
      tags: [Images]
      summary: Search for images
      parameters:
        - name: query
          in: query
          required: true
          schema: {type: string}
        - name: per_page
          in: query
          schema: {type: integer, minimum: 1, maximum: 30}
      responses:
        '200':
          description: Images found

  /qa/generate:
    post:
      tags: [Q&A]
      summary: Generate Q&A pairs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description]
              properties:
                description: {type: string}
                language: {type: string, enum: [es, en]}
                count: {type: integer, minimum: 1, maximum: 10}
      responses:
        '200':
          description: Q&A pairs generated successfully

  /progress/track:
    post:
      tags: [Progress]
      summary: Track learning event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [eventType, eventData]
              properties:
                eventType: {type: string}
                eventData: {type: object}
      responses:
        '201':
          description: Event tracked successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: {type: string, format: uuid}
        email: {type: string, format: email}
        emailConfirmed: {type: boolean}

    Session:
      type: object
      properties:
        access_token: {type: string}
        refresh_token: {type: string}
        expires_at: {type: integer}

    Description:
      type: object
      properties:
        id: {type: string}
        imageId: {type: string}
        style: {type: string}
        content: {type: string}
        language: {type: string, enum: [english, spanish]}
        createdAt: {type: string, format: date-time}

    VocabularyItem:
      type: object
      required: [id, phrase, definition, category, difficulty]
      properties:
        id: {type: string}
        phrase: {type: string}
        definition: {type: string}
        category: {type: string}
        difficulty: {type: string, enum: [beginner, intermediate, advanced]}
        examples: {type: array, items: {type: string}}

    Error:
      type: object
      properties:
        success: {type: boolean, default: false}
        error: {type: string}
        details: {type: string}

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
