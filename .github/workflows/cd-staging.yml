name: CD - Staging Deployment

on:
  workflow_dispatch:

env:
  NODE_VERSION: '20'

# Allow only one staging deployment at a time
concurrency:
  group: staging-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build with Vercel
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production

      - name: Deploy to Vercel Staging
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.preview-url }}';
            const comment = `## Staging Deployment Ready

            Staging environment has been deployed and is ready for testing.

            **URL:** ${url}

            ### Quick Links
            - [View Staging Site](${url})
            - [Health Check](${url}/api/health)
            - [API Status](${url}/api/status)

            ### Next Steps
            1. Test the staging deployment
            2. Run E2E tests against staging
            3. Verify all features work as expected
            4. Approve for production deployment
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================================================
  # STAGING VERIFICATION
  # ============================================================================

  verify-staging:
    name: Verify Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests against staging
        run: npm run test:e2e:staging
        env:
          TEST_URL: ${{ needs.deploy-staging.outputs.preview-url }}
          CI: true

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          TEST_URL: ${{ needs.deploy-staging.outputs.preview-url }}
          CI: true

      - name: Health check
        run: |
          url="${{ needs.deploy-staging.outputs.preview-url }}/api/health"

          for i in {1..5}; do
            if curl -f -s "$url" > /dev/null; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done

          echo "Health check failed"
          exit 1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # ============================================================================
  # STAGING SUCCESS
  # ============================================================================

  staging-success:
    name: Staging Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-staging, verify-staging]
    if: always()

    steps:
      - name: Check status
        run: |
          if [ "${{ needs.deploy-staging.result }}" != "success" ] || \
             [ "${{ needs.verify-staging.result }}" != "success" ]; then
            echo "Staging deployment or verification failed"
            exit 1
          fi
          echo "Staging deployment successful!"

      - name: Post summary
        run: |
          echo "### Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Verify | ${{ needs.verify-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URL:** ${{ needs.deploy-staging.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
