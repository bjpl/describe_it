name: CD - Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deploy only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Prevent concurrent production deployments
concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  # ============================================================================
  # PRE-DEPLOYMENT VALIDATION
  # ============================================================================

  pre-deploy-validation:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Run all tests
        run: |
          npm run lint
          npm run typecheck
          npm run test:run -- --coverage
        env:
          CI: true

      - name: Build verification
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

  # ============================================================================
  # BUILD & PUSH DOCKER IMAGE
  # ============================================================================

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [pre-deploy-validation]
    if: always() && (needs.pre-deploy-validation.result == 'success' || github.event.inputs.skip_tests == 'true')
    timeout-minutes: 30

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=prod-{{branch}}-
            type=raw,value=latest
            type=raw,value=production
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          artifact-name: sbom-production.spdx
          output-file: ./sbom-production.spdx

      - name: Upload SBOM
        uses: actions/upload-artifact@v5
        with:
          name: sbom-production
          path: ./sbom-production.spdx
          retention-days: 90

  # ============================================================================
  # DEPLOY TO VERCEL PRODUCTION
  # ============================================================================

  deploy-vercel:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    timeout-minutes: 20
    environment:
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build with Vercel
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

  # ============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # ============================================================================

  post-deploy-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          TEST_URL: ${{ needs.deploy-vercel.outputs.preview-url }}
          CI: true

      - name: Health check
        run: |
          url="${{ needs.deploy-vercel.outputs.preview-url }}"
          max_attempts=10
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts..."

            if curl -f -s "${url}/api/health" > /dev/null; then
              echo "Health check passed!"
              exit 0
            fi

            echo "Health check failed, retrying in 10 seconds..."
            sleep 10
            attempt=$((attempt + 1))
          done

          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Verify deployment status
        run: |
          echo "Deployment verification completed successfully"
          echo "Production URL: ${{ needs.deploy-vercel.outputs.preview-url }}"

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================

  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --config=lighthouserc.js
        env:
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref }}
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          TEST_URL: ${{ needs.deploy-vercel.outputs.preview-url }}

      - name: Run Web Vitals tests
        run: npm run test:vitals
        env:
          TEST_URL: ${{ needs.deploy-vercel.outputs.preview-url }}
          CI: true

      - name: Upload performance results
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: performance-results
          path: |
            .lighthouseci/
            web-vitals.json
          retention-days: 30

  # ============================================================================
  # DEPLOYMENT SUCCESS
  # ============================================================================

  deployment-success:
    name: Deployment Success
    runs-on: ubuntu-latest
    needs:
      - deploy-vercel
      - post-deploy-verification
      - performance-tests
    if: always()

    steps:
      - name: Check deployment status
        run: |
          if [ "${{ needs.deploy-vercel.result }}" != "success" ] || \
             [ "${{ needs.post-deploy-verification.result }}" != "success" ]; then
            echo "Deployment failed or verification failed"
            exit 1
          fi
          echo "Production deployment completed successfully!"

      - name: Create deployment summary
        run: |
          echo "### Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Vercel Deploy | ${{ needs.deploy-vercel.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Verification | ${{ needs.post-deploy-verification.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL:** ${{ needs.deploy-vercel.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          echo "URL: ${{ needs.deploy-vercel.outputs.preview-url }}"

  # ============================================================================
  # ROLLBACK ON FAILURE
  # ============================================================================

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [post-deploy-verification]
    if: failure()

    steps:
      - name: Trigger rollback
        run: |
          echo "Deployment verification failed. Manual rollback required."
          echo "Please review the failed checks and consider rolling back to the previous version."
          exit 1
