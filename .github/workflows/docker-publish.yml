name: Docker - Build & Publish

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # BUILD DOCKER IMAGE
  # ============================================================================

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Describe It
            org.opencontainers.image.description=AI-powered image description and analysis tool
            org.opencontainers.image.vendor=Describe It Team

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Generate provenance
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          artifact-name: sbom.spdx
          output-file: ./sbom.spdx

  # ============================================================================
  # SCAN DOCKER IMAGE
  # ============================================================================

  scan:
    name: Scan Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

  # ============================================================================
  # TEST DOCKER IMAGE
  # ============================================================================

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull or build image
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          else
            docker build -f config/docker/Dockerfile -t test-image .
          fi

      - name: Test container startup
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          else
            IMAGE="test-image"
          fi

          # Start container
          CONTAINER_ID=$(docker run -d -p 3000:3000 "$IMAGE")

          # Wait for container to be ready
          sleep 10

          # Check if container is still running
          if ! docker ps | grep -q "$CONTAINER_ID"; then
            echo "Container failed to start"
            docker logs "$CONTAINER_ID"
            exit 1
          fi

          # Test health endpoint
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health; then
              echo "Health check passed!"
              docker stop "$CONTAINER_ID"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 2
          done

          echo "Health check failed"
          docker logs "$CONTAINER_ID"
          docker stop "$CONTAINER_ID"
          exit 1

  # ============================================================================
  # PUBLISH SUCCESS
  # ============================================================================

  publish-success:
    name: Docker Publish Success
    runs-on: ubuntu-latest
    needs: [build, scan, test]
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Check status
        run: |
          if [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ]; then
            echo "Docker build or test failed"
            exit 1
          fi
          echo "Docker image published successfully!"

      - name: Generate summary
        run: |
          echo "### Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Scan | ${{ needs.scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** ${{ needs.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
